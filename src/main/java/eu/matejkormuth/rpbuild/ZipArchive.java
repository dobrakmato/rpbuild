/*
 *  rpbuild - RPBuild is a build system for Minecraft resource packs.
 *  Copyright (C) 2015 Matej Kormuth 
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  "Minecraft" is a trademark of Mojang AB
 */
package eu.matejkormuth.rpbuild;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class that creates zip file from specified input files.
 */
public class ZipArchive {
	private static final Logger log = LoggerFactory.getLogger(ZipArchive.class);

	private ZipOutputStream stream;
	private Path absolute;

	/**
	 * Creates new instance of zip archive.
	 * 
	 * @param absolutePath
	 *            absolute path that will be used to resolve path when calling
	 *            <code>addFile(Path relative)</code>.
	 * @param out
	 *            archive file
	 */
	public ZipArchive(Path absolutePath, File out) {
		try {
			this.stream = new ZipOutputStream(new FileOutputStream(out));
			this.stream
					.setComment("Generated by: rpbuild 1.0 by dobrakmato. <http://github.com/dobrakmato>");
			this.stream.setLevel(9);
			this.stream.setMethod(ZipOutputStream.DEFLATED);

			this.absolute = absolutePath;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Adds file at specified path to this zip archive.
	 * 
	 * @param path
	 *            path of file to be added
	 * @throws IOException
	 */
	public void addFile(Path path) throws IOException {
		log.debug("Adding file: {}", path);

		ZipEntry entry = new ZipEntry(this.absolute.relativize(
				path.toAbsolutePath()).toString());

		this.stream.putNextEntry(entry);
		this.stream.write(Files.readAllBytes(path));
		this.stream.closeEntry();
	}

	/**
	 * Closes this zip archive and underlying ZipOutputStream.
	 */
	public void close() {
		try {
			this.stream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
